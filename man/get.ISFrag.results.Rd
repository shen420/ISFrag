\name{get.ISFrag.results}
\alias{get.ISFrag.results}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Summarize ISFrag Results
}
\description{
Creates a list containing ISFrag parent-fragment trees and feature table containing parent-fragment relationship information.
}
\usage{
get.ISFrag.results(ISF_List, featureTable)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{ISF_List}{
List of tables generated by find.level1() function.
}
  \item{featureTable}{
featureTable generated by ms2.tofeaturetable() function
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (ISF_List, featureTable)
{
    results <- list()
    for (a in 1:length(ISF_List)) {
        names(ISF_List)[a] <- rownames(ISF_List[[a]][1, ])
        ISF_List[[a]] <- ISF_List[[a]][ISF_List[[a]]$ISF_level !=
            "Level_3", ]
        if (nrow(ISF_List[[a]]) == 1) {
            ISF_List[a] <- NA
        }
    }
    ISF_List <- ISF_List[!is.na(ISF_List)]
    treeList <- list()
    for (m in 1:length(ISF_List)) {
        index <- which(rownames(featureTable) == names(ISF_List)[[m]])
        if (featureTable$ISF_level[index] == 0) {
            featureTable$ISF_level[index] <- paste(names(ISF_List)[[m]],
                "Parent", sep = "<-")
            assign(paste0(names(ISF_List)[[m]], "_", names(ISF_List)[[m]]),
                Node$new(paste0(rownames(featureTable)[index],
                  ": mz=", round(featureTable$mz[index], digits = 2),
                  ", rt=", round(featureTable$rt[index], digits = 0),
                  ", ParentFeature")))
            searchSpace <- ISF_List[[m]][2:nrow(ISF_List[[m]]),
                ]
            searchSpace <- cbind(searchSpace, rownames(ISF_List[[m]][1,
                ]))
            colnames(searchSpace)[ncol(searchSpace)] <- "Parent"
            searchSpace <- cbind(searchSpace, rownames(searchSpace))
            colnames(searchSpace)[ncol(searchSpace)] <- "ID"
            while (nrow(searchSpace) != 0) {
                tmpFeature <- searchSpace[1, ]
                searchSpace[1, ] <- NA
                searchSpace <- searchSpace[complete.cases(searchSpace),
                  ]
                tmpindex <- which(rownames(featureTable) == tmpFeature$ID)
                if (featureTable$ISF_level[tmpindex] == 0) {
                  featureTable$ISF_level[tmpindex] <- paste0(names(ISF_List)[[m]],
                    "<-", tmpFeature$ISF_level)
                }
                else {
                  featureTable$ISF_level[tmpindex] <- paste0(featureTable$ISF_level[tmpindex],
                    ";", names(ISF_List)[[m]], "<-", tmpFeature$ISF_level)
                }
                assign(paste0(tmpFeature$ID, "_", names(ISF_List)[[m]]),
                  eval(as.name(paste0(tmpFeature$Parent, "_",
                    names(ISF_List)[[m]])))$AddChild(paste0(tmpFeature$ID,
                    ": mz=", round(tmpFeature$mz, digits = 2),
                    ", rt=", round(tmpFeature$rt, digits = 0),
                    ", PPcor=", round(tmpFeature$ppcor, digits = 2),
                    ", level=", tmpFeature$ISF_level)))
                newindex <- which(names(ISF_List) == tmpFeature$ID)
                if (length(newindex) == 1) {
                  toBind <- ISF_List[[newindex]]
                  toBind <- toBind[2:nrow(toBind), ]
                  toBind <- cbind(toBind, tmpFeature$ID)
                  colnames(toBind)[ncol(toBind)] <- "Parent"
                  toBind <- cbind(toBind, rownames(toBind))
                  colnames(toBind)[ncol(toBind)] <- "ID"
                  uniqueToBind <- toBind
                  searchSpace <- rbind(searchSpace, uniqueToBind)
                }
            }
            treeitem <- eval(as.name(paste0(names(ISF_List)[[m]],
                "_", names(ISF_List)[[m]])))
            treeList[[length(treeList) + 1]] <- treeitem
            names(treeList)[length(treeList)] <- names(ISF_List)[[m]]
        }
    }
    results[[1]] <- treeList
    results[[2]] <- featureTable
    names(results) <- c("TreesList", "FeatureTable")
    return(results)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory (show via RShowDoc("KEYWORDS")):
% \keyword{ ~kwd1 }
% \keyword{ ~kwd2 }
% Use only one keyword per line.
% For non-standard keywords, use \concept instead of \keyword:
% \concept{ ~cpt1 }
% \concept{ ~cpt2 }
% Use only one concept per line.
