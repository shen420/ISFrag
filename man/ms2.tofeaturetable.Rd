\name{ms2.tofeaturetable}
\alias{ms2.tofeaturetable}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Assigns MS2 Information
}
\description{
Extracts and assigns MS2 spectrum from DDA to features generated from Full-scan, DIA, or DDA samples.
}
\usage{
ms2.tofeaturetable(MS2data, featureTable, type)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{MS2data}{
XCMSnExp object produced by the generate.featuretable() function containing MS2 scans extracted from raw .mzXML files.
}
  \item{featureTable}{
FeatureTable generated by the generate.featuretable() function containing all features extracted from Full-scan, DIA, or DDA samples.
}
  \item{type}{
For single sample analysis: type = "single", for multiple samples analysis: type = "multi".
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (MS2data, featureTable, type)
{
    if (type == "single") {
        MS2spectra <- matchMS2(MS2data, featureTable, expandRt = 30,
            expandMz = 0.01, ppm = 0)
        featureTable <- cbind(featureTable, F, 0, 0, 0, 0)
        colnames(featureTable)[(ncol(featureTable) - 4):ncol(featureTable)] <- c("MS2_match",
            "MS2mz", "MS2int", "PeaksCount", "fromFile")
        featureTable <- cbind(featureTable, 0)
        colnames(featureTable)[ncol(featureTable)] <- "ISF_level"
        for (i in 1:nrow(featureTable)) {
            if (!is.null(MS2spectra[[i]])) {
                tmpSpectra <- MS2spectra[[i]]
                for (j in 1:length(tmpSpectra)) {
                  if (tmpSpectra[[j]]@peaksCount == 0) {
                    tmpSpectra[[j]] <- NA
                  }
                }
                tmpSpectra <- tmpSpectra[is.na(tmpSpectra) ==
                  FALSE]
                if (length(tmpSpectra) > 0) {
                  currInt = tmpSpectra[[1]]@precursorIntensity
                  currIdx = 1
                  for (k in 1:length(tmpSpectra)) {
                    if (tmpSpectra[[k]]@precursorIntensity >
                      currInt) {
                      currIdx = k
                      currInt = tmpSpectra[[k]]@precursorIntensity
                    }
                  }
                  finalSpectra = tmpSpectra[[currIdx]]
                  featureTable$MS2_match[i] <- TRUE
                  featureTable$MS2mz[i] <- paste(round(finalSpectra@mz,
                    4), collapse = ";")
                  featureTable$MS2int[i] <- paste(finalSpectra@intensity,
                    collapse = ";")
                  featureTable$PeaksCount[i] <- finalSpectra@peaksCount
                  featureTable$fromFile[i] <- finalSpectra@fromFile
                }
            }
        }
    }
    else {
        MS2spectra <- matchMS2multi(MS2data, featureTable, expandRt = 30,
            expandMz = 0.01, ppm = 0)
        featureTable <- cbind(featureTable, F, 0, 0, 0, 0)
        colnames(featureTable)[(ncol(featureTable) - 4):ncol(featureTable)] <- c("MS2_match",
            "MS2mz", "MS2int", "PeaksCount", "fromFile")
        featureTable <- cbind(featureTable, 0)
        colnames(featureTable)[ncol(featureTable)] <- "ISF_level"
        for (i in 1:nrow(featureTable)) {
            if (!is.null(MS2spectra[[i]])) {
                tmpSpectra <- MS2spectra[[i]]
                for (j in 1:length(tmpSpectra)) {
                  if (tmpSpectra[[j]]@peaksCount == 0) {
                    tmpSpectra[[j]] <- NA
                  }
                }
                tmpSpectra <- tmpSpectra[is.na(tmpSpectra) ==
                  FALSE]
                if (length(tmpSpectra) > 0) {
                  currInt = tmpSpectra[[1]]@precursorIntensity
                  currIdx = 1
                  for (k in 1:length(tmpSpectra)) {
                    if (tmpSpectra[[k]]@precursorIntensity >
                      currInt) {
                      currIdx = k
                      currInt = tmpSpectra[[k]]@precursorIntensity
                    }
                  }
                  finalSpectra = tmpSpectra[[currIdx]]
                  featureTable$MS2_match[i] <- TRUE
                  featureTable$MS2mz[i] <- paste(round(finalSpectra@mz,
                    4), collapse = ";")
                  featureTable$MS2int[i] <- paste(finalSpectra@intensity,
                    collapse = ";")
                  featureTable$PeaksCount[i] <- finalSpectra@peaksCount
                  featureTable$fromFile[i] <- finalSpectra@fromFile
                }
            }
        }
    }
    return(featureTable)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory (show via RShowDoc("KEYWORDS")):
% \keyword{ ~kwd1 }
% \keyword{ ~kwd2 }
% Use only one keyword per line.
% For non-standard keywords, use \concept instead of \keyword:
% \concept{ ~cpt1 }
% \concept{ ~cpt2 }
% Use only one concept per line.
