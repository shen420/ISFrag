\name{find.level1}
\alias{find.level1}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Finds Level 1 In-source Fragmentations
}
\description{
Further refines Level 2 in-source fragment list of tables generated in find.level2() function to label additional Level 1 in-source fragments.
}
\usage{
find.level1(ISF_putative, ms2.tol = 0.02)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{ISF_putative}{
List of tables generated by find.level2() function.
}
  \item{ms2.tol}{
MS2 tolerance when calculating reverse dot product of parent and in-source fragment ions.
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (ISF_putative, ms2.tol = 0.02)
{
    reverse_dp <- function(x, y) {
        x <- x[x[, 2] > 0, ]
        y <- y[y[, 2] > 0, ]
        if (nrow(x) == 0 | nrow(y) == 0) {
            return(0)
        }
        x[, 2] <- 100 * x[, 2]/max(x[, 2])
        y[, 2] <- 100 * y[, 2]/max(y[, 2])
        alignment <- data.frame(matrix(nrow = nrow(x), ncol = 3))
        alignment[, 1:2] <- x[, 1:2]
        y1 <- y
        for (i in 1:nrow(x)) {
            mass.diff <- abs(y1[, 1] - x[i, 1])
            if (min(mass.diff) <= ms2.tol) {
                alignment[i, 3] <- y1[mass.diff == min(mass.diff),
                  2][1]
                y1[mass.diff == min(mass.diff), 1][1] <- NA
                y1 <- y1[complete.cases(y1), ]
                if (is.null(nrow(y1)) == TRUE)
                  break
                if (nrow(y1) == 0)
                  break
            }
        }
        alignment <- alignment[complete.cases(alignment), ]
        if (nrow(alignment) == 0) {
            score <- 0
        }
        if (nrow(alignment) > 0) {
            AB <- sum(alignment[, 2] * alignment[, 3])
            A <- sum(alignment[, 2]^2)
            B <- sum(y[, 2]^2)
            score <- as.numeric(AB/sqrt(A * B))
        }
        match_No <- nrow(alignment)
        matched_ratio <- as.numeric(nrow(alignment)/nrow(y))
        return <- c(score, match_No, matched_ratio)
        return(return)
    }
    no_cores <- detectCores() - 1
    print("Using cores:")
    print(no_cores)
    registerDoParallel(no_cores)
    ISF_confirmed <- foreach(a = (1:length(ISF_putative)), .packages = c("xcms",
        "MSnbase", "dplyr")) \%dopar\% {
        currTable <- ISF_putative[[a]]
        if (currTable$MS2mz[1] == 0) {
            return(currTable)
        }
        else {
            X <- data.frame(m.z = strsplit(currTable$MS2mz[1],
                ";")[[1]], int = strsplit(currTable$MS2int[1],
                ";")[[1]])
            X$m.z <- as.numeric(as.character(X$m.z))
            X$int <- as.numeric(as.character(X$int))
            for (b in 2:nrow(currTable)) {
                if (currTable$ISF_level[b] != "Level_2")
                  (next)()
                if (currTable$MS2mz[b] != 0) {
                  Y <- data.frame(m.z = strsplit(currTable$MS2mz[b],
                    ";")[[1]], int = strsplit(currTable$MS2int[b],
                    ";")[[1]])
                  Y$m.z <- as.numeric(as.character(Y$m.z))
                  Y$int <- as.numeric(as.character(Y$int))
                  if (reverse_dp(X, Y)[1] > 0.5 | reverse_dp(X,
                    Y)[3] > 0.7) {
                    currTable$ISF_level[b] <- "Level_1"
                  }
                }
            }
            return(currTable)
        }
    }
    for (a in 1:length(ISF_confirmed)) {
        names(ISF_confirmed)[a] <- paste0(rownames(ISF_confirmed[[a]][1,
            ]), "_", round(ISF_confirmed[[a]]$mz[1], digits = 2),
            "_", round(ISF_confirmed[[a]]$rt[1], digits = 0))
    }
    stopImplicitCluster()
    return(ISF_confirmed)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory (show via RShowDoc("KEYWORDS")):
% \keyword{ ~kwd1 }
% \keyword{ ~kwd2 }
% Use only one keyword per line.
% For non-standard keywords, use \concept instead of \keyword:
% \concept{ ~cpt1 }
% \concept{ ~cpt2 }
% Use only one concept per line.
